import React, { useState, useEffect } from 'react'
import { Layout, ConfigProvider } from 'antd'
import ruRU from 'antd/locale/ru_RU'
import Sidebar from './components/Sidebar'
import ChatWindow from './components/ChatWindow'
import NewChatModal from './components/NewChatModal'
import TemplatesModal from './components/TemplatesModal'
import CreateFolderModal from './components/CreateFolderModal'
import GroupParticipantsModal from './components/GroupParticipantsModal'
import ForwardMessageModal from './components/ForwardMessageModal'
import ProfileSettingsModal from './components/ProfileSettingsModal'
import { testUsers, testTemplates, initialChats, testStores, testEmails, testPresets, availableLabels, groupFilters } from './data/testData'
import { localStorageUtils } from './utils/localStorage'
import './App.css'

function App() {
  const [chats, setChats] = useState(initialChats)
  const [currentChatId, setCurrentChatId] = useState(null)
  const [users, setUsers] = useState(testUsers)
  const [templates, setTemplates] = useState(testTemplates)
  const [templateFolders, setTemplateFolders] = useState([
    { id: 1, name: '–û–±—â–∏–µ', createdAt: new Date() },
    { id: 2, name: '–†–∞–±–æ—Ç–∞', createdAt: new Date() }
  ])
  const [labels, setLabels] = useState(availableLabels)
  const [groups, setGroups] = useState(groupFilters)
  const [selectedGroupFilter, setSelectedGroupFilter] = useState(null)
  const [presets, setPresets] = useState(testPresets)
  const [selectedPreset, setSelectedPreset] = useState(null)
  const [stores] = useState(testStores)
  const [emails] = useState(testEmails)
  const [searchTerm, setSearchTerm] = useState('')
  const [targetLanguage, setTargetLanguage] = useState(() => localStorageUtils.getLanguage())
  const [showNewChatModal, setShowNewChatModal] = useState(false)
  const [showTemplatesModal, setShowTemplatesModal] = useState(false)
  const [showCreateFolderModal, setShowCreateFolderModal] = useState(false)
  const [showParticipantsModal, setShowParticipantsModal] = useState(false)
  const [showForwardModal, setShowForwardModal] = useState(false)
  const [forwardedMessage, setForwardedMessage] = useState(null)
  const [isMinimized, setIsMinimized] = useState(false)
  const [currentGroupParticipants, setCurrentGroupParticipants] = useState([])
  const [showProfileModal, setShowProfileModal] = useState(false)
  const [activeSearchTerm, setActiveSearchTerm] = useState('')
  const [searchResults, setSearchResults] = useState([])
  const [currentSearchIndex, setCurrentSearchIndex] = useState(0)

  const [currentUser, setCurrentUser] = useState({ id: 1, name: '–í—ã', avatar: 'üë§' })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
  const handleLanguageChange = (newLanguage) => {
    setTargetLanguage(newLanguage)
    localStorageUtils.setLanguage(newLanguage)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ª–æ–≤–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã
  const userMatchesGroupFilter = (user, groupFilter) => {
    if (!groupFilter || !groupFilter.conditions) return true
    
    const { labels: requiredLabels, matchType } = groupFilter.conditions
    const userLabels = user.labels || []
    
    if (matchType === 'all') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –í–°–ï —Ç—Ä–µ–±—É–µ–º—ã–µ —è—Ä–ª—ã–∫–∏
      return requiredLabels.every(label => userLabels.includes(label))
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –•–û–¢–Ø –ë–´ –û–î–ò–ù —Ç—Ä–µ–±—É–µ–º—ã–π —è—Ä–ª—ã–∫
      return requiredLabels.some(label => userLabels.includes(label))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–µ
  const getFilteredChatsByGroup = (groupFilter) => {
    if (!groupFilter) return chats
    
    return chats.filter(chat => {
      // –í—Å–µ —á–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –ª–∏—á–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è—Ä–ª—ã–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
      const participantId = chat.participants.find(id => id !== currentUser.id)
      const participant = users.find(u => u.id === participantId)
      
      if (participant) {
        return userMatchesGroupFilter(participant, groupFilter)
      }
      
      return false
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—Ä–ª—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserLabels = (userId, newLabels) => {
    setUsers(prevUsers =>
      prevUsers.map(user =>
        user.id === userId
          ? { ...user, labels: newLabels }
          : user
      )
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è—Ä–ª—ã–∫–∞
  const createNewLabel = (newLabel) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —è—Ä–ª—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ä–ª—ã–∫–æ–≤
    setLabels(prevLabels => [...prevLabels, {
      id: newLabel.id,
      name: newLabel.name,
      color: newLabel.color,
      textColor: newLabel.textColor
    }])
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ —è—Ä–ª—ã–∫–∞
    setGroups(prevGroups => [...prevGroups, {
      id: newLabel.id,
      name: newLabel.name,
      description: `${newLabel.name} –∫–æ–Ω—Ç–∞–∫—Ç—ã`,
      color: newLabel.color,
      textColor: newLabel.textColor,
      conditions: {
        labels: [newLabel.id],
        matchType: 'any'
      }
    }])
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞
  const updateLabel = (updatedLabel) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —è—Ä–ª—ã–∫ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ä–ª—ã–∫–æ–≤
    setLabels(prevLabels =>
      prevLabels.map(label =>
        label.id === updatedLabel.id
          ? {
              ...label,
              name: updatedLabel.name,
              color: updatedLabel.color,
              textColor: updatedLabel.textColor
            }
          : label
      )
    )
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ —è—Ä–ª—ã–∫–∞
    setGroups(prevGroups =>
      prevGroups.map(group =>
        group.id === updatedLabel.id
          ? {
              ...group,
              name: updatedLabel.name,
              color: updatedLabel.color,
              textColor: updatedLabel.textColor,
              description: `${updatedLabel.name} –∫–æ–Ω—Ç–∞–∫—Ç—ã`
            }
          : group
      )
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —è—Ä–ª—ã–∫–∞
  const deleteLabel = (labelId) => {
    // –£–¥–∞–ª—è–µ–º —è—Ä–ª—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—Ä–ª—ã–∫–æ–≤
    setLabels(prevLabels => prevLabels.filter(label => label.id !== labelId))
    
    // –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è —ç—Ç–æ–≥–æ —è—Ä–ª—ã–∫–∞
    setGroups(prevGroups => prevGroups.filter(group => group.id !== labelId))
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —è—Ä–ª—ã–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    if (selectedGroupFilter?.id === labelId) {
      setSelectedGroupFilter(null)
    }
    
    // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —è—Ä–ª—ã–∫ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setUsers(prevUsers =>
      prevUsers.map(user => ({
        ...user,
        labels: user.labels ? user.labels.filter(label => label !== labelId) : []
      }))
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—Ä–ª—ã–∫–∞ –≤ –ø—Ä–µ—Å–µ—Ç
  const saveLabelToPreset = (labelId, presetId) => {
    setPresets(prevPresets =>
      prevPresets.map(preset =>
        preset.id === presetId
          ? {
              ...preset,
              labels: preset.labels 
                ? preset.labels.includes(labelId) 
                  ? preset.labels // –ï—Å–ª–∏ —è—Ä–ª—ã–∫ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                  : [...preset.labels, labelId] // –ï—Å–ª–∏ —è—Ä–ª—ã–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
                : [labelId] // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —è—Ä–ª—ã–∫–æ–≤ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            }
          : preset
      )
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è/–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const togglePinMessage = (chatId, messageId) => {
    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === chatId
          ? {
              ...chat,
              messages: chat.messages.map(message =>
                message.id === messageId
                  ? { ...message, isPinned: !message.isPinned }
                  : message
              )
            }
          : chat
      )
    )
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ Sidebar)
  // const filteredChats = chats.filter(chat => {
  //   if (chat.isArchived) return false
  //   if (!searchTerm) return true
  //   
  //   const searchLower = searchTerm.toLowerCase()
  //   return chat.name.toLowerCase().includes(searchLower) ||
  //          (chat.messages.length > 0 && 
  //           chat.messages[chat.messages.length - 1].content.toLowerCase().includes(searchLower))
  // })

  const currentChat = chats.find(chat => chat.id === currentChatId)

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  const openChat = (chatId, searchTerm = '') => {
    setCurrentChatId(chatId)
    setIsMinimized(false)
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    // –°—á–µ—Ç—á–∏–∫ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º
    if (searchTerm) {
      setActiveSearchTerm(searchTerm)
      const chat = chats.find(c => c.id === chatId)
      if (chat) {
        const searchLower = searchTerm.toLowerCase()
        const matchingMessages = chat.messages.filter(message => 
          message.content.toLowerCase().includes(searchLower)
        )
        
        setSearchResults(matchingMessages)
        setCurrentSearchIndex(0)
        
        if (matchingMessages.length > 0) {
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
          setTimeout(() => {
            scrollToMessage(matchingMessages[0].id)
          }, 100)
        }
      }
    } else {
      setActiveSearchTerm('')
      setSearchResults([])
      setCurrentSearchIndex(0)
    }
  }

  // –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  const markMessageAsRead = (messageId) => {
    setChats(prevChats => 
      prevChats.map(chat => {
        const updatedMessages = chat.messages.map(message => 
          message.id === messageId ? { ...message, read: true } : message
        )
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const unreadCount = updatedMessages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length
        
        return {
          ...chat,
          messages: updatedMessages,
          unreadCount: unreadCount
        }
      })
    )
  }

  // –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  const markMessageAsUnread = (messageId) => {
    setChats(prevChats => 
      prevChats.map(chat => {
        const updatedMessages = chat.messages.map(message => 
          message.id === messageId ? { ...message, read: false } : message
        )
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const unreadCount = updatedMessages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length
        
        return {
          ...chat,
          messages: updatedMessages,
          unreadCount: unreadCount
        }
      })
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  const recalculateUnreadCount = (chatId) => {
    setChats(prevChats => 
      prevChats.map(chat => {
        if (chat.id === chatId) {
          const unreadCount = chat.messages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length
          return { ...chat, unreadCount }
        }
        return chat
      })
    )
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = (content, replyTo = null) => {
    if (!content.trim() || !currentChatId) return

    const newMessage = {
      id: Date.now(),
      senderId: currentUser.id,
      senderName: currentUser.name,
      content: content.trim(),
      timestamp: new Date(),
      read: true,
      replyTo: replyTo ? {
        messageId: replyTo.id,
        senderName: replyTo.senderName,
        content: replyTo.content
      } : null
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === currentChatId
          ? { ...chat, messages: [...chat.messages, newMessage] }
          : chat
      )
    )

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    setTimeout(() => {
      simulateResponse(currentChatId)
    }, 1000 + Math.random() * 2000)
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
  const simulateResponse = (chatId) => {
    const chat = chats.find(c => c.id === chatId)
    if (!chat || chat.type !== 'private') return

    const participant = users.find(u => u.id !== currentUser.id && chat.participants.includes(u.id))
    if (!participant) return

    // –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    let responses = []
    let brandName = null

    if (chat.platform === 'amazon') {
      responses = [
        'Your order has been processed successfully',
        'New product review available',
        'Inventory update: Product back in stock',
        'Customer inquiry received',
        'Sales report generated'
      ]
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
      const existingBrand = chat.messages.find(msg => msg.brandName)?.brandName
      const amazonBrands = ['Liberhaus', 'NYCHKA', 'TechGear Pro', 'StyleMax', 'EcoHome']
      brandName = existingBrand || amazonBrands[Math.floor(Math.random() * amazonBrands.length)]
    } else {
      responses = [
        '–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!',
        '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ',
        '–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–π–º—É—Å—å —ç—Ç–∏–º',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        '–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏'
      ]
    }

    const response = responses[Math.floor(Math.random() * responses.length)]
    const responseMessage = {
      id: Date.now(),
      senderId: participant.id,
      senderName: participant.name,
      content: response,
      timestamp: new Date(),
      read: false,
      ...(brandName && { brandName })
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === chatId
          ? { 
              ...chat, 
              messages: [...chat.messages, responseMessage],
              // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              unreadCount: chatId === currentChatId ? 
                chat.messages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length :
                (chat.unreadCount || 0) + 1
            }
          : chat
      )
    )
  }

  // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
  const simulateRandomMessages = () => {
    const privateChats = chats.filter(chat => 
      chat.type === 'private' && 
      chat.id !== currentChatId && 
      !chat.isArchived
    )
    
    if (privateChats.length === 0) return

    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const randomChat = privateChats[Math.floor(Math.random() * privateChats.length)]
    const participant = users.find(u => u.id !== currentUser.id && randomChat.participants.includes(u.id))
    
    if (!participant) return

    // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    let randomMessages = []
    let brandName = null

    if (randomChat.platform === 'amazon') {
      randomMessages = [
        'New customer review posted',
        'Product performance report ready',
        'Inventory alert: Low stock detected',
        'Customer support ticket created',
        'Sales analytics updated'
      ]
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
      const existingBrand = randomChat.messages.find(msg => msg.brandName)?.brandName
      const amazonBrands = ['Liberhaus', 'NYCHKA', 'TechGear Pro', 'StyleMax', 'EcoHome']
      brandName = existingBrand || amazonBrands[Math.floor(Math.random() * amazonBrands.length)]
    } else {
      randomMessages = [
        '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        '–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º?',
        '–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?',
        '–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª—ã, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
        '–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É?',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
        '–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å?',
        '–í—Å–µ –≥–æ—Ç–æ–≤–æ, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å'
      ]
    }

    const randomMessage = randomMessages[Math.floor(Math.random() * randomMessages.length)]
    const incomingMessage = {
      id: Date.now(),
      senderId: participant.id,
      senderName: participant.name,
      content: randomMessage,
      timestamp: new Date(),
      read: false,
      ...(brandName && { brandName })
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === randomChat.id
          ? { 
              ...chat, 
              messages: [...chat.messages, incomingMessage],
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
              unreadCount: (chat.unreadCount || 0) + 1
            }
          : chat
      )
    )
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const createChat = (chatData) => {
    const newChat = {
      id: Date.now(),
      name: chatData.name,
      type: chatData.type,
      participants: [currentUser.id, ...chatData.participants],
      avatar: chatData.avatar,
      messages: [],
      isImportant: false,
      isArchived: false,
      unreadCount: 0
    }

    setChats(prevChats => [...prevChats, newChat])
    setShowNewChatModal(false)
    openChat(newChat.id)
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏
  const toggleImportant = () => {
    if (!currentChatId) return

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === currentChatId
          ? { ...chat, isImportant: !chat.isImportant }
          : chat
      )
    )
  }

  // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
  const archiveChat = () => {
    if (!currentChatId) return

    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
      setChats(prevChats =>
        prevChats.map(chat =>
          chat.id === currentChatId
            ? { ...chat, isArchived: true }
            : chat
        )
      )
      
      setCurrentChatId(null)
      setIsMinimized(false)
    }
  }

  // –í—Å—Ç–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞
  const insertTemplate = (content) => {
    setShowTemplatesModal(false)
    if (insertTemplateCallback) {
      insertTemplateCallback(content)
    }
  }

  const [insertTemplateCallback, setInsertTemplateCallback] = useState(null)

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
  const createTemplateFolder = (folderData) => {
    const newFolder = {
      id: Date.now(),
      name: folderData.name,
      createdAt: new Date()
    }
    setTemplateFolders(prev => [...prev, newFolder])
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
  const deleteTemplateFolder = (folderId) => {
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ —É–¥–∞–ª—è–µ–º–æ–π –ø–∞–ø–∫–∏ –≤ –ø–∞–ø–∫—É "–û–±—â–∏–µ" (id: 1)
    const generalFolderId = 1
    setTemplates(prev => prev.map(template => 
      template.folderId === folderId ? { ...template, folderId: generalFolderId } : template
    ))
    
    // –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
    setTemplateFolders(prev => prev.filter(folder => folder.id !== folderId))
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
  const updateTemplateFolder = (folderId, newName) => {
    setTemplateFolders(prev => prev.map(folder => 
      folder.id === folderId ? { ...folder, name: newName } : folder
    ))
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  const createTemplate = (templateData) => {
    const newTemplate = {
      id: Date.now(),
      name: templateData.name,
      content: templateData.content,
      folderId: templateData.folderId || 1 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø–∞–ø–∫—É "–û–±—â–∏–µ"
    }
    setTemplates(prev => [...prev, newTemplate])
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  const deleteTemplate = (templateId) => {
    setTemplates(prev => prev.filter(template => template.id !== templateId))
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  const updateTemplate = (templateId, updatedData) => {
    setTemplates(prev => prev.map(template => 
      template.id === templateId 
        ? { ...template, ...updatedData }
        : template
    ))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –∏ –∞—Ä—Ö–∏–≤–æ–º
  const toggleFavorite = (chatId) => {
    setChats(prev => prev.map(chat => 
      chat.id === chatId 
        ? { ...chat, isFavorite: !chat.isFavorite }
        : chat
    ))
  }

  const toggleArchive = (chatId) => {
    setChats(prev => prev.map(chat => 
      chat.id === chatId 
        ? { ...chat, isArchived: !chat.isArchived }
        : chat
    ))
  }

  const togglePin = (chatId) => {
    setChats(prev => prev.map(chat => 
      chat.id === chatId 
        ? { ...chat, isPinned: !chat.isPinned }
        : chat
    ))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
  const createPreset = (presetData) => {
    if (presetData.id && presets.find(p => p.id === presetData.id)) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
      setPresets(prev => prev.map(preset => 
        preset.id === presetData.id ? presetData : preset
      ))
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
      setPresets(prev => [...prev, presetData])
    }
  }

  const deletePreset = (presetId) => {
    setPresets(prev => prev.filter(preset => preset.id !== presetId))
    if (selectedPreset && selectedPreset.id === presetId) {
      setSelectedPreset(null)
    }
  }

  const selectPreset = (presetId) => {
    const preset = presets.find(p => p.id === presetId)
    setSelectedPreset(preset)
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É
  const handleAddParticipant = (userId) => {
    setCurrentGroupParticipants(prev => [...prev, userId])
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
  const handleRemoveParticipant = (userId) => {
    setCurrentGroupParticipants(prev => prev.filter(id => id !== userId))
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleForwardMessage = (message) => {
    setForwardedMessage(message)
    setShowForwardModal(true)
  }

  // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
  const forwardMessage = (targetChatId, message) => {
    const forwardedMessageData = {
      id: Date.now(),
      senderId: currentUser.id,
      senderName: currentUser.name,
      content: `–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.senderName}: ${message.content}`,
      timestamp: new Date(),
      read: false,
      forwardedFrom: {
        messageId: message.id,
        senderName: message.senderName,
        originalContent: message.content,
        originalTimestamp: message.timestamp
      }
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === targetChatId
          ? { 
              ...chat, 
              messages: [...chat.messages, forwardedMessageData],
              // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              unreadCount: targetChatId === currentChatId ? 
                chat.messages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length :
                (chat.unreadCount || 0) + 1
            }
          : chat
      )
    )
  }

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ ID
  const scrollToMessage = (messageId) => {
    const messageElement = document.getElementById(`message-${messageId}`)
    if (messageElement) {
      messageElement.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      })
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
      messageElement.style.backgroundColor = '#fff2e8'
      setTimeout(() => {
        messageElement.style.backgroundColor = ''
      }, 2000)
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  const goToNextSearchResult = () => {
    if (searchResults.length > 0 && currentSearchIndex < searchResults.length - 1) {
      const nextIndex = currentSearchIndex + 1
      setCurrentSearchIndex(nextIndex)
      scrollToMessage(searchResults[nextIndex].id)
    }
  }

  const goToPreviousSearchResult = () => {
    if (searchResults.length > 0 && currentSearchIndex > 0) {
      const prevIndex = currentSearchIndex - 1
      setCurrentSearchIndex(prevIndex)
      scrollToMessage(searchResults[prevIndex].id)
    }
  }

  // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
  const resetSearch = () => {
    setActiveSearchTerm('')
    setSearchResults([])
    setCurrentSearchIndex(0)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserProfile = (updatedProfile) => {
    setCurrentUser(updatedProfile)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    setChats(prevChats =>
      prevChats.map(chat =>
        chat.messages.some(msg => msg.senderId === currentUser.id)
          ? {
              ...chat,
              messages: chat.messages.map(msg =>
                msg.senderId === currentUser.id
                  ? { ...msg, senderName: updatedProfile.name }
                  : msg
              )
            }
          : chat
      )
    )
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
  const addParticipantsToGroup = (participantIds) => {
    if (!currentChatId || !participantIds.length) return

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === currentChatId
          ? { 
              ...chat, 
              participants: [...chat.participants, ...participantIds]
            }
          : chat
      )
    )

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const addedUsers = users.filter(user => participantIds.includes(user.id))
    const addedUserNames = addedUsers.map(user => user.name).join(', ')
    
    const systemMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: 'System',
      content: `–î–æ–±–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${addedUserNames}`,
      timestamp: new Date(),
      read: true,
      isSystemMessage: true
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === currentChatId
          ? { 
              ...chat, 
              messages: [...chat.messages, systemMessage]
            }
          : chat
      )
    )
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
  const removeParticipantFromGroup = (chatId, participantId) => {
    if (!chatId || !participantId) return

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === chatId
          ? { 
              ...chat, 
              participants: chat.participants.filter(id => id !== participantId)
            }
          : chat
      )
    )

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const removedUser = users.find(user => user.id === participantId)
    const systemMessage = {
      id: Date.now(),
      senderId: 'system',
      senderName: 'System',
      content: `–£—á–∞—Å—Ç–Ω–∏–∫ ${removedUser?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É`,
      timestamp: new Date(),
      read: true,
      isSystemMessage: true
    }

    setChats(prevChats =>
      prevChats.map(chat =>
        chat.id === chatId
          ? { 
              ...chat, 
              messages: [...chat.messages, systemMessage]
            }
          : chat
      )
    )
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
  useEffect(() => {
    const interval = setInterval(() => {
      simulateRandomMessages()
    }, 10000 + Math.random() * 20000) // –ö–∞–∂–¥—ã–µ 10-30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval)
  }, [chats, currentChatId])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
  const startTestMessageSending = () => {
    const testChatId = 1 // ID —á–∞—Ç–∞ "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testMessages = [
      "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
      "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
      "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞?",
      "–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞?",
      "–û—Ç–ª–∏—á–Ω–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å",
      "–í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!",
      "–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç—ã",
      "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
      "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?",
      "–ù—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å",
      "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å?",
      "–ñ–¥—É –æ—Ç–≤–µ—Ç–∞",
      "–°—Ä–æ—á–Ω–æ!",
      "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É",
      "–í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å",
      "–ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
      "–í—Å–µ –≥–æ—Ç–æ–≤–æ",
      "–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å",
      "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ",
      "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
      "–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞",
      "–£–¥–∞—á–∏!"
    ]

    let messageCount = 0
    const maxMessages = 25

    const sendTestMessage = () => {
      if (messageCount >= maxMessages) {
        return
      }

      const randomMessage = testMessages[Math.floor(Math.random() * testMessages.length)]
      const newMessage = {
        id: Date.now() + Math.random(),
        content: randomMessage,
        senderId: 2, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"
        senderName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        timestamp: new Date(),
        read: false,
        type: 'text'
      }

      setChats(prevChats => 
        prevChats.map(chat => {
          if (chat.id === testChatId) {
            const updatedMessages = [...chat.messages, newMessage]
            const unreadCount = updatedMessages.filter(msg => !msg.read && msg.senderId !== currentUser?.id).length
            return {
              ...chat,
              messages: updatedMessages,
              unreadCount: unreadCount,
              lastMessage: randomMessage,
              lastMessageTime: new Date()
            }
          }
          return chat
        })
      )

      messageCount++
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    sendTestMessage()

    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(() => {
      sendTestMessage()
      
      if (messageCount >= maxMessages) {
        clearInterval(interval)
      }
    }, 2000)

    return interval
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const testInterval = startTestMessageSending()
    
    return () => {
      if (testInterval) {
        clearInterval(testInterval)
      }
    }
  }, [])

  return (
    <ConfigProvider locale={ruRU}>
      <Layout className="app-container">
        {!isMinimized && (
          <Sidebar
            chats={chats}
            currentChatId={currentChatId}
            searchTerm={searchTerm}
            onSearchChange={setSearchTerm}
            onSearchReset={resetSearch}
            onChatSelect={openChat}
            onNewChat={() => setShowNewChatModal(true)}
            users={users}
            onToggleFavorite={toggleFavorite}
            onToggleArchive={toggleArchive}
            onTogglePin={togglePin}
            presets={presets}
            selectedPreset={selectedPreset}
            onPresetSelect={selectPreset}
            onCreatePreset={createPreset}
            onDeletePreset={deletePreset}
            stores={stores}
            emails={emails}
            targetLanguage={targetLanguage}
            onShowProfileSettings={() => setShowProfileModal(true)}
            currentUser={currentUser}
            labels={labels}
            groups={groups}
            selectedGroupFilter={selectedGroupFilter}
            onGroupFilterSelect={setSelectedGroupFilter}
            onUpdateUserLabels={updateUserLabels}
            onCreateLabel={createNewLabel}
            onUpdateLabel={updateLabel}
            onDeleteLabel={deleteLabel}
            onSaveLabelToPreset={saveLabelToPreset}
            getFilteredChatsByGroup={getFilteredChatsByGroup}
            userMatchesGroupFilter={userMatchesGroupFilter}
          />
        )}

        <ChatWindow
          chat={currentChat}
          isMinimized={isMinimized}
          onMinimize={() => setIsMinimized(!isMinimized)}
          onSendMessage={sendMessage}
          onShowTemplates={() => setShowTemplatesModal(true)}
          currentUser={currentUser}
          users={users}
          onInsertTemplate={setInsertTemplateCallback}
          onShowParticipants={() => setShowParticipantsModal(true)}
          targetLanguage={targetLanguage}
          onForwardMessage={handleForwardMessage}
          onScrollToMessage={scrollToMessage}
          onMarkAsRead={markMessageAsRead}
          onMarkAsUnread={markMessageAsUnread}
          onUpdateProfile={updateUserProfile}
          onTogglePinMessage={togglePinMessage}
          activeSearchTerm={activeSearchTerm}
          searchResults={searchResults}
          currentSearchIndex={currentSearchIndex}
          onNextSearchResult={goToNextSearchResult}
          onPreviousSearchResult={goToPreviousSearchResult}
          hasAnyModalOpen={
            showNewChatModal ||
            showTemplatesModal ||
            showCreateFolderModal ||
            showParticipantsModal ||
            showForwardModal ||
            showProfileModal
          }
        />

        <NewChatModal
          visible={showNewChatModal}
          users={users}
          onClose={() => {
            setShowNewChatModal(false)
            setCurrentGroupParticipants([])
          }}
          onCreateChat={createChat}
          currentGroupParticipants={currentGroupParticipants}
          onAddParticipant={handleAddParticipant}
          onRemoveParticipant={handleRemoveParticipant}
          targetLanguage={targetLanguage}
        />

        <TemplatesModal
          visible={showTemplatesModal}
          templates={templates}
          templateFolders={templateFolders}
          onClose={() => setShowTemplatesModal(false)}
          onSelectTemplate={insertTemplate}
          onCreateTemplate={createTemplate}
          onDeleteTemplate={deleteTemplate}
          onUpdateTemplate={updateTemplate}
          onCreateFolder={() => setShowCreateFolderModal(true)}
          onDeleteFolder={deleteTemplateFolder}
          onUpdateFolder={updateTemplateFolder}
          targetLanguage={targetLanguage}
        />

        <CreateFolderModal
          visible={showCreateFolderModal}
          onClose={() => setShowCreateFolderModal(false)}
          onCreateFolder={createTemplateFolder}
          targetLanguage={targetLanguage}
        />

        <GroupParticipantsModal
          visible={showParticipantsModal}
          chat={currentChat}
          users={users}
          onClose={() => setShowParticipantsModal(false)}
          targetLanguage={targetLanguage}
          onAddParticipants={addParticipantsToGroup}
          onRemoveParticipant={removeParticipantFromGroup}
          currentUser={currentUser}
        />

        <ForwardMessageModal
          visible={showForwardModal}
          onClose={() => {
            setShowForwardModal(false)
            setForwardedMessage(null)
          }}
          onForward={forwardMessage}
          chats={chats}
          currentChatId={currentChatId}
          forwardedMessage={forwardedMessage}
          users={users}
        />

        <ProfileSettingsModal
          visible={showProfileModal}
          onClose={() => setShowProfileModal(false)}
          currentUser={currentUser}
          onUpdateProfile={updateUserProfile}
          targetLanguage={targetLanguage}
          onLanguageChange={handleLanguageChange}
        />

      </Layout>
    </ConfigProvider>
  )
}

export default App
